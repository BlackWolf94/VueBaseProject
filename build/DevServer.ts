import {Express} from 'express';
import * as path from 'path';
import {WpClient} from './webpack/client.conf';
import chokidar from 'chokidar';
import webpack, {HotModuleReplacementPlugin} from 'webpack';
import {WpServe} from './webpack/server.conf';
import MFS from 'memory-fs';

type TOnServerBundle = (...props: any[]) => any;

export const devServer = (app: Express, onServerBundleReady: TOnServerBundle) => {

    (WpClient.entry as any).app = ['webpack-hot-middleware/client', (WpClient.entry as any).app];
    const clientCompiler = webpack(WpClient);

    const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
        publicPath: WpClient.output.publicPath,
        noInfo: true,
        serverSideRender: true,
        logLevel: 'silent',
    });

    app.use(devMiddleware);

    app.use(require('webpack-hot-middleware')(clientCompiler));

    // watch src files and rebuild SSR bundle
    global.console.log('Building SSR bundle...');
    const serverCompiler = webpack(WpServe);
    const mfs = new MFS();

    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (error, stats) => {
        if (error) { throw error; }

        global.console.log(
            `${stats.toString({
                colors: true,
                modules: false,
                children: false,
                chunks: false,
                chunkModules: false,
            })}\n\n`,
        );

        if (stats.hasErrors()) {
            global.console.error(stats.compilation.errors);
            throw new Error(stats.compilation.errors.join('\n'));
        }

        // read bundle generated by vue-ssr-webpack-plugin
        const bundle = JSON.parse(
            mfs.readFileSync(path.join(WpClient.output.path, 'vue-ssr-server-bundle.json'), 'utf-8'),
        );
        onServerBundleReady(bundle);
    });
};
